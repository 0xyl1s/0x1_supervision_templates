#!/usr/bin/env bash
# https://raw.github.com/0xyl1s/0x1_supervision_templates/master/ub10.04_x86_64/ms/system_variation_01/00ini/0x1_install_system


# TODO: comprehensive tests


# ____________________________________________________________________
# >>>>>  0x1_lib   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#{{{

function e__datetime_sec(){
date +%Y-%m-%d_%H%M%S
}

# ――――――――――――――――――――――――――――――――――――――#}}}

# >>> variables#{{{
x_system_basedir="/.0x1"
x_system_ms_basedir="${x_system_basedir}/00ms"
x_system_ms_data_dir="${x_system_basedir}/00ms/00data"
x_root_inidir=$(cd $(dirname ${0}); pwd)
x_root_ini_logsdir="${x_root_inidir}/logs"

x_script_log="${x_root_ini_logsdir}/0x1.ini.system"
#}}}

# >>> log ini#{{{
if [[ -f ${x_script_log}.done ]]
then
    echo "script already runned: ${x_script_log}.done"
    exit
fi
if [[ -f ${x_script_log} ]]
then
    echo "ERROR: interrupted script (${0}) execution, see log: ${x_script_log}" 2>&1
    exit 1
fi
echo "${0} start - $(e__datetime_sec)" > ${x_script_log}
echo "DEBUG: x_root_inidir = ${x_root_inidir}" >> ${x_script_log}
echo "DEBUG: x_script_log = ${x_script_log}" >> ${x_script_log}
if [[ ! -f ${x_script_log} ]]
then
    echo "ERROR: can't write log file ${x_script_log} (from script ${0})" 2>&1
    exit 1
fi
#}}}

umask 0027
ufw allow 22/tcp
ufw --force enable

if [[ ! -d ${x_system_basedir} ]]
then
    mkdir ${x_system_basedir}
    chmod g+s ${x_system_basedir}
    echo "created dir ${x_system_basedir}" >> ${x_script_log}
else
    echo "ERROR: directory ${x_system_basedir} exists already" >> ${x_script_log}
    exit 1
fi

cd ${x_system_basedir}

repositories=(
	0x1_system_livelinks
	0x1_supervision_templates
	)

for repository in ${repositories[@]}
do
    echo "cloning https://github.com/0xyl1s/${repository}.git" >> ${x_script_log}
    git clone git://github.com/0xyl1s/${repository}.git >> ${x_script_log}
done

if [[ ! -d ${x_system_basedir}/0x1_supervision_templates/ub10.04_x86_64/ms/system_variation_01 ]]
then
    echo "ERROR: can't access directory ${x_system_basedir}/0x1_supervision_templates/ub10.04_x86_64/ms/system_variation_01" 2>&1
    exit 1
fi

rsync -avh --no-o --no-g --stats ${x_system_basedir}/0x1_supervision_templates/ub10.04_x86_64/ms/system_variation_01/ ${x_system_ms_basedir}/
rm -R ${x_system_basedir}/0x1_supervision_templates

#network
cp /etc/network/interfaces ${x_system_ms_basedir}/network/00livelinks/interfaces/interfaces_00ori
mv /etc/network/interfaces ${x_system_ms_basedir}/network/00livelinks/interfaces/
ln -s ${x_system_ms_basedir}/network/00livelinks/interfaces/interfaces /etc/network/

#bash
mv /etc/login.defs ${x_system_ms_basedir}/bash/00livelinks/etc_login.defs/login.defs_00ori
ln -s ${x_system_ms_basedir}/bash/00livelinks/etc_login.defs/login.defs /etc/

#TODO: check file and folder creation umask, may need to activate common-session
mv /etc/pam.d/common-session ${x_system_ms_basedir}/pam/00livelinks/etc_common-session/common-session_00ori
ln -s ${x_system_ms_basedir}/pam/00livelinks/etc_common-session/common-session /etc/pam.d/

#apt
mv /etc/apt/sources.list ${x_system_ms_basedir}/apt/00livelinks/sources.list/sources.list_00ori
ln -s ${x_system_ms_basedir}/apt/00livelinks/sources.list/sources.list /etc/apt/

#mount
mv /etc/fstab ${x_system_ms_basedir}/mount/00livelinks/fstab/
ln -s ${x_system_ms_basedir}/mount/00livelinks/fstab/fstab /etc/

#rvm
ln -s ${x_system_ms_basedir}/rvm/00livelinks/etc_rvmrc/rvmrc /etc/

DEBIAN_FRONTEND=noninteractive aptitude update; aptitude full-upgrade -y
aptitude install debconf-utils -y
echo "dash dash/sh boolean false"| debconf-set-selections; dpkg-reconfigure -f noninteractive dash
aptitude install ntp sshfs shorewall mc tar gzip lzma rar unrar bzip2 arj lha rpm unace zip unzip p7zip vim clamav ncdu htop ttf-ubuntu-font-family ttf-droid ttf-liberation screen -y
aptitude clean

# >>> log end#{{{
echo "${0} done - $(e__datetime_sec)" >> ${x_script_log}
e__datetime_sec > ${x_script_log}.done

x_ini_phase_system_done_file="${x_root_ini_logsdir}/0x1.ini.system.done.ering"
echo 'done' > ${x_ini_phase_system_done_file}
if [[ ! -f ${x_ini_phase_system_done_file} ]]
then
    echo "ERROR: can't access x_ini_phase_system_done_file ${x_ini_phase_system_done_file}." 2>&1
    exit 1
fi

#}}}

#UNSURE: sleeping to provide enough time for reboot execution (it seems that subsequent commands called after the execution of this script begin before effective reboot)
#reboot && sleep 10
echo "XDEBUG: system install done, press ^c to interrupt"

# ____________________________________________________________________
# >>>>>  projet epiculture/ec1   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#{{{
# Sources, Infos & Contact : http://www.epiculture.org
# Author: Pierre-Maël Crétinon
# License: GNU GPLv3 ( www.epiculture.org/ec1/LICENSE )
# Copyright: 2010-2012 Pierre-Maël Crétinon
# Sponsor: studio Helianova - http://studio.helianova.com
# ――――――――――――――――――――――――――――――――――――――#}}}
# vim: ft=sh
