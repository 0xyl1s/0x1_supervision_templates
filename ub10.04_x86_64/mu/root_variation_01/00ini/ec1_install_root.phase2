#!/usr/bin/env bash
# https://raw.github.com/epiculture/ec1_supervision_templates/master/ub10.04_x86_64/mu/root_variation_01/00ini/ec1_install_root.phase2

# TODO: comprehensive tests


# ____________________________________________________________________
# >>>>>  ec1_lib   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#{{{

function e__datetime_sec(){
date +%Y-%m-%d_%H%M%S
}

# ――――――――――――――――――――――――――――――――――――――#}}}

# >>> variables#{{{
ec1_system_basedir="/.ec1"
ec1_system_ms_basedir="${ec1_system_basedir}/00ms"
ec1_system_ms_datadir="${ec1_system_basedir}/00ms/00data"
ec1_root_inidir=$(cd $(dirname ${0}); pwd)
ec1_root_ini_logsdir="${ec1_root_inidir}/logs"
ec1_root_ini_datadir="${ec1_root_inidir}/dispatch/root/00data"
ec1_root_home="${HOME}"
ec1_root_basedir="${ec1_root_home}/.ec1"
ec1_root_mu_basedir="${ec1_root_home}/.ec1/00mu"
ec1_root_mu_datadir="${ec1_root_mu_basedir}/00data"

ec1_script_log="${ec1_root_ini_logsdir}/ec1.ini.root_phase2"
#}}}

# >>> log ini#{{{
if [[ -f ${ec1_script_log}.done ]]
then
    echo "script already runned: ${ec1_script_log}.done"
    exit
fi
if [[ -f ${ec1_script_log} ]]
then
    echo "ERROR: interrupted script (${0}) execution, see log: ${ec1_script_log}" 2>&1
    exit 1
fi
echo "${0} start - $(e__datetime_sec)" > ${ec1_script_log}
if [[ ! -f ${ec1_script_log} ]]
then
    echo "ERROR: can't write log file ${ec1_script_log} (from script ${0})" 2>&1
    exit 1
fi
#}}}

umask 077

# ruby
# cf rvm requirements
aptitude install build-essential openssl libreadline6 libreadline6-dev curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison subversion -y
# TODO: only source ~/.bashrc
echo "EC1DEBUG>>> ec1_root_home = ${ec1_root_home}" >> ${ec1_script_log}
echo "EC1DEBUG2>>> rvm_script (ec1_root_home) = ${ec1_root_home}/.rvm/scripts/rvm" >> ${ec1_script_log}
echo "EC1DEBUG3>>> rvm_script (HOME) = ${HOME}/.rvm/scripts/rvm" >> ${ec1_script_log}
#[[ -s "${ec1_root_home}/.rvm/scripts/rvm" ]] && . "${ec1_user_home}/.rvm/scripts/rvm" # Load RVM function
[[ -s "${HOME}/.rvm/scripts/rvm" ]] && . "${HOME}/.rvm/scripts/rvm" # Load RVM function
[[ -r ${rvm_path}/scripts/completion ]] && . ${rvm_path}/scripts/completion
check_rvm=$(type rvm|head -1)
if [[ ! ${check_rvm} == 'rvm is a function' ]]
then
    echo "ERROR: rvm is NOT a function ..." 2>&1
    exit 1
fi
rvm install 1.9.3
rvm use 1.9.3 --default
if [ -z "${RUBY_VERSION}" ]
then
    echo "ERROR: no ruby ..." 2>&1
    exit 1
fi

# finishing system ms installation
mv ${ec1_root_inidir}/dispatch/system/00data ${ec1_system_ms_basedir}/
ec1_data_system_files=(
	${ec1_system_ms_datadir}/entity.domain
	${ec1_system_ms_datadir}/machine.hostname
	${ec1_system_ms_datadir}/machine.ssh_port
	)
for ec1_data_system_file in ${ec1_data_system_files[@]}
do
    if [[ ! -f ${ec1_data_system_file} ]]
    then
	echo "ERROR: can't access ec1_data_system_file: ${ec1_data_system_file}" 2>&1
	exit 1
    fi
done
ec1_system_machine_hostname=$(cat "${ec1_system_ms_datadir}/machine.hostname")
ec1_system_entity_domain=$(cat "${ec1_system_ms_datadir}/entity.domain")
ec1_machine_ssh_port=$(cat ${ec1_system_ms_datadir}/machine.ssh_port)
ec1_system_machine_fqdn="${ec1_system_machine_hostname}.${ec1_system_entity_domain}"

# importing and checking mu 00data
directories_to_check=(
	$ec1_root_ini_datadir
	$ec1_root_mu_datadir
	)
for directory in ${directories_to_check[@]}
do
    if [[ ! -d ${directory} ]]
    then
	echo "ERROR: can't access directory ${directory}" 2>&1
	exit 1
    fi
done
rsync -avh --no-o --no-g --remove-source-files "${ec1_root_ini_datadir}/" "${ec1_root_mu_datadir}/"
rmdir -p ${ec1_root_ini_datadir}
if [[ -d ${ec1_root_ini_datadir} ]]
then
    echo "ERROR: can't remove directory ${ec1_root_ini_datadir}" 2>&1
    exit 1
fi

ec1_data_user_files=(
	${ec1_root_mu_datadir}/authorized_keys
	${ec1_root_mu_datadir}/user.name
	${ec1_root_mu_datadir}/user.email
	${ec1_root_mu_datadir}/user.password
	${ec1_root_mu_datadir}/entity.domain
	)
for ec1_data_user_file in ${ec1_data_user_files[@]}
do
    if [[ ! -f ${ec1_data_user_file} ]]
    then
	echo "ERROR: can't access ec1_data_user_file: ${ec1_data_user_file}" 2>&1
	exit 1
    fi
done
ec1_user_name=$(cat ${ec1_root_mu_datadir}/user.name)
ec1_user_email=$(cat ${ec1_root_mu_datadir}/user.email)


# user openssh
# importing and checking user mu 00certificates
mv "${ec1_root_inidir}/dispatch/root/00certificates" "${ec1_root_mu_basedir}/openssh/"
ec1_user_openssh_certificates_dir="${ec1_root_mu_basedir}/openssh/00certificates"
if [[ ! -f ${ec1_user_openssh_certificates_dir}/user.openssh_defcert ]]
then
    echo "ERROR: can't access user.openssh_defcert: ${ec1_user_openssh_certificates_dir}/user.openssh_defcert" 2>&1
    exit 1
fi
mv "${ec1_user_openssh_certificates_dir}/user.openssh_defcert" "${ec1_root_mu_datadir}/"
ec1_user_openssh_defcert=$(cat "${ec1_root_mu_datadir}/user.openssh_defcert")
ec1_user_openssh_default_certificate_files=(
	"${ec1_user_openssh_certificates_dir}/${ec1_user_openssh_defcert}"
	"${ec1_user_openssh_certificates_dir}/${ec1_user_openssh_defcert}.pub"
	"${ec1_user_openssh_certificates_dir}/${ec1_user_openssh_defcert}.passcode"
	)
for ec1_user_openssh_default_certificate_file in ${ec1_user_openssh_default_certificate_files[@]}
do
    if [[ ! -f ${ec1_user_openssh_default_certificate_file} ]]
    then
	echo "ERROR: can't access ec1_user_openssh_default_certificate_file: ${ec1_user_openssh_default_certificate_file}" 2>&1
	exit 1
    fi
done

mv "${ec1_root_mu_datadir}/authorized_keys" ${ec1_root_mu_basedir}/openssh/00livelinks/authorized_keys/authorized_keys
user_ssh_dir="${ec1_root_home}/.ssh"
if [[ -d "${user_ssh_dir}__pre-ec1" ]]
then
    echo "ERROR: directory ${user_ssh_dir}__pre-ec1 already exists" 2>&1
    exit 1
fi
if [[ -d ${user_ssh_dir} ]]
then
    mv "${user_ssh_dir}" "${user_ssh_dir}__pre-ec1"
fi
mkdir ${user_ssh_dir}
chmod 700 ${user_ssh_dir}
ln -s "${ec1_root_mu_basedir}/openssh/00livelinks/config/config" "${user_ssh_dir}/"
ln -s "${ec1_root_mu_basedir}/openssh/00livelinks/authorized_keys/authorized_keys" "${user_ssh_dir}/"
ln -s "${ec1_root_mu_basedir}/openssh/00certificates/id_rsa" "${user_ssh_dir}/"
ln -s "${ec1_root_mu_basedir}/openssh/00certificates/id_rsa.pub" "${user_ssh_dir}/"


# git
ruby -p -i -e "gsub(/@@_ec1_user_name_@@/,\"${ec1_user_name}\")" ${ec1_root_mu_basedir}/git/00livelinks/.gitconfig/.gitconfig
ruby -p -i -e "gsub(/@@_ec1_user_email_@@/,\"${ec1_user_email}\")" ${ec1_root_mu_basedir}/git/00livelinks/.gitconfig/.gitconfig
ln -s ${ec1_root_mu_basedir}/git/00livelinks/.gitconfig/.gitconfig ${ec1_root_home}/

# cron
ruby -p -i -e "gsub(/@@_ec1_user_email_@@/,\"${ec1_user_email}\")" ${ec1_root_mu_basedir}/cron/00config/crontab.ec1local
e.cronu

# system hostname
cp -p /etc/hostname ${ec1_system_ms_datadir}/etc_hostname_00ori
cat "${ec1_system_machine_fqdn}" > /etc/hostname

# system openssh
ruby -p -i -e "gsub(/@@_ec1_ssh_port_@@/,\"${ec1_machine_ssh_port}\")" ${ec1_root_mu_basedir}/openssh/00livelinks/etc_sshd_config/sshd_config
mv /etc/ssh/sshd_config ${ec1_root_mu_basedir}/openssh/00livelinks/etc_sshd_config/sshd_config_00ori
ln -s ${ec1_root_mu_basedir}/openssh/00livelinks/etc_sshd_config/sshd_config /etc/ssh/
service ssh restart

# system shorewall
ruby -p -i -e "gsub(/@@_ec1_ssh_port_@@/,\"${ec1_machine_ssh_port}\")" ${ec1_root_mu_basedir}/shorewall/00livelinks/00configs/01/ec1/rules
ln -s ${ec1_root_mu_basedir}/shorewall/00livelinks/00configs/01/ec1 /etc/shorewall/
mv /etc/shorewall/shorewall.conf ${ec1_root_mu_basedir}/shorewall/00livelinks/shorewall.conf/shorewall.conf_00ori
ln -s ${ec1_root_mu_basedir}/shorewall/00livelinks/shorewall.conf/shorewall.conf /etc/shorewall/
mv /etc/default/shorewall ${ec1_root_mu_basedir}/shorewall/00livelinks/etc_default/shorewall_00ori









# WARNING : temporary disabling firewall for test systems
#ln -s ${ec1_root_mu_basedir}/shorewall/00livelinks/etc_default/shorewall /etc/default/
ufw disable
#shorewall start












# system postfix
# TODO: check if installing postfix in subsequent phases do not trigger the install of another SMTP server during initial system base installations
echo "postfix postfix/main_mailer_type        select  Internet Site" | debconf-set-selections
echo "postfix postfix/mailname        string  ${ec1_system_machine_fqdn}" | debconf-set-selections
aptitude install postfix mailutils -y


chmod -R go= ${ec1_root_mu_basedir}
(cd ${ec1_root_mu_basedir} ; git init ; git add . ; git commit -am 'ec1_user_mu first commit' ; cd ${ec1_root_basedir} ; git clone -l --bare ${ec1_root_mu_basedir} ${ec1_root_mu_basedir}.git ; mv ${ec1_root_mu_basedir}.git ${ec1_root_basedir}/.to_cluster/)
ln -s ${ec1_root_mu_basedir} "${ec1_root_mu_basedir}/00sync/autocommit/"

(cd /etc ; git init ; git add . ; git commit -am '/etc first commit' ; cd / ; git clone -l --bare /etc /etc.git ; mv /etc.git ${ec1_root_basedir}/.to_cluster/)
ln -s /etc "${ec1_root_mu_basedir}/00sync/autocommit/"

chmod -R g-w,o= ${ec1_system_ms_basedir}
(cd ${ec1_system_ms_basedir} ; git init ; git add . ; git commit -am 'ec1_system_ms first commit' ; cd ${ec1_system_basedir} ; git clone -l --bare ${ec1_system_ms_basedir} ${ec1_system_ms_basedir}.git ; mv ${ec1_system_ms_basedir}.git ${ec1_system_basedir}/.to_cluster/)
ln -s ${ec1_system_ms_basedir} "${ec1_root_mu_basedir}/00sync/autocommit/"


# >>> log end#{{{
echo "done - $(e__datetime_sec)" >> ${ec1_script_log}
e__datetime_sec > ${ec1_script_log}.done
#}}}

# ____________________________________________________________________
# >>>>>  projet epiculture/ec1   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>#{{{
# Sources, Infos & Contact : http://www.epiculture.org
# Author: Pierre-Maël Crétinon
# License: GNU GPLv3 ( www.epiculture.org/ec1/LICENSE )
# Copyright: 2010-2012 Pierre-Maël Crétinon
# Sponsor: studio Helianova - http://studio.helianova.com
# ――――――――――――――――――――――――――――――――――――――#}}}
# vim: ft=sh
